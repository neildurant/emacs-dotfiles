#+property: results silent indent
* Org Mode Configuration
  :PROPERTIES:
  :ID:       BCFE2FAF-6510-4949-B182-66521BB14A5D
  :END:
* Main Settings
** Clocking
#+begin_src emacs-lisp
  (setq org-clock-out-remove-zero-time-clocks 't)
#+end_src
** Directories
Set directories here.
#+begin_src emacs-lisp
    ;; Use environment variables to set org directories
    (if 
       (getenv "ORG_DIR")
        (setq personal-org-dir (getenv "ORG_DIR"))
       (setq personal-org-dir (concat (getenv "HOME") "/Documents/personal")
    ))

    ;; define a function to read contents of personal-org-dir and
    ;; return *.org files.  Use this function when we need to know
    ;; what files are in personal-org-dir :-)

    (defun njn/personal-org-files()
       (interactive)
       (directory-files personal-org-dir 't "^[^.].*org$")
    )

    (if 
       (getenv "NOTESMINE_DIR")
        (setq njn/notesmine-dir (getenv "NOTESMINE_DIR"))
       (setq njn/notesmine-dir (concat (getenv "HOME") "/Documents/notesmine-org")
    ))


    (defun njn/notesmine-org-files()
       (interactive)
       (directory-files njn/notesmine-dir 't "^[^.].*org$")
    )

#+end_src

** Capture Files
I use three files for notes that I create using Org-mode's "Remember"
feature.

  - Notes and TODOs go to notes.org
  - Appointments go to nate.org/Appointments
  - Journal entries go to journal.org
  - Work related stuff goes to $WORK_FILE env. var, or else
    to "workfile.org" in personal org dir.

These settings are used in the [[Templates]] section of this file.

#+begin_src emacs-lisp

  (setq njn/main-org-file (concat personal-org-dir "/nate.org"))
  (setq njn/journal-org-file (concat personal-org-dir "/journal.org"))
  (setq njn/notes-org-file (concat personal-org-dir "/notes.org"))
  (setq njn/work-file (concat personal-org-dir "/.org"))
  (if
    (getenv "WORK_FILE")
      (setq njn/work-file (getenv "WORK_FILE"))
     (setq njn/work-file (concat personal-org-dir "/workfile.org"))
  )

  
#+end_src

** File Types
#+begin_src emacs-lisp
    ;; Trigger org-mode for files ending in .org .org_archive and .txt
    (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
#+end_src
* Outlines
#+begin_src emacs-lisp
  ;; Don't put blank lines after headings.
  (setq org-blank-before-new-entry (quote ((heading) (plain-list-item))))

  (setq org-log-done (quote time))
  ;; Log notes and state changes into LOGBOOK property
  (setq org-log-into-drawer t)
  (setq org-startup-indented t)
  ;; Function to insert subheading here
  ;; Insert subheading right here, don't respect content
(defun njn/org-insert-subheading()
  (interactive)
  (let ((org-insert-heading-respect-content nil))
    (org-insert-subheading t)))

#+end_src
* Capture
** Templates

#+begin_src emacs-lisp
  (setq org-capture-templates 
     `(("t" "Todo" entry (file, njn/notes-org-file) "* TODO %? \n\n%U  %i" :clock-in t :clock-resume t) 
       ("n" "Note" entry (file, njn/notes-org-file) "* %?\n\n" :prepend t :clock-in t :clock-resume t)
       ("j" "Journal" entry (file+datetree, njn/journal-org-file) "* %?\nEntered on %^u\n  %i\n  %a")
       ("m" "Meeting" entry (file+headline, njn/work-file "Meetings") "* %?\n\n" :prepend t :clock-in t)
      )
  )
  
  
  (setq org-remember-templates
     (list
        (list "Appointment" ?a "* %?\n  %U" njn/main-org-file "Appointments" nil)
        (list "Journal" ?j "* %?\n\n  %i\n  %a" njn/journal-org-file 'date-tree)
        (list "Todo" ?t "* TODO %?\n\n%U  %i" njn/notes-org-file 'top)
        (list "Note" ?n "* %?" njn/notes-org-file 'top nil)
  ))

#+end_src

** Initialization
** Clock Settings
#+begin_src emacs-lisp
  ;; Separate drawers for clocking and logs
  (setq org-drawers (quote ("PROPERTIES" "LOGBOOK" "CLOCK")))
  ;; Save clock data in the CLOCK drawer and state changes and notes in the LOGBOOK drawer
  (setq org-clock-into-drawer "CLOCK")
  ;; Don't clock out when moving task to a done state
  (setq org-clock-out-when-done nil)

    ;; Keep clocks running
  (setq org-remember-clock-out-on-exit nil)
  ;; Automatically clock in when adding a note
  (add-hook 'remember-mode-hook 'org-clock-in 'append)
#+end_src
* Tasks / TODOs
#+begin_src emacs-lisp
  ;; org-checklist can un-set all checkboxes after you mark a task as
  ;; DONE.  Handy for recurring tasks.
  (require 'org-checklist)
#+end_src

** Task States
  - Typical
    - Todo
    - Started
    - Done
    - Cancelled
  - Non-Typical
    - Waiting means I'm waiting on someone else to proceed w/this.
    - Someday means I might consider this task
    - Delegated means some other weenie is doing this job :-)

  - @/! means leave a note and record time when entering.
  - ! means to leave a timestamp when exiting unless the next state records the time.
  - "D" means mark done/leave note, "d" is just quick "done" w/no note

#+begin_src emacs-lisp
(setq org-todo-keywords '(
(sequence "TODO(t)" "STARTED(s)" "|" "DONE(d!)")  
(sequence "WAITING(w@/@)" "|" "DELEGATED(e@/@)" "SOMEDAY(o@/@)" "CANCELLED(c@/@)" "CANCELLED(f)")
))
#+end_src

#+begin_src emacs-lisp
    ;; From norang.org -- Change task state to STARTED from TODO when clocking in -------
(defun bh/clock-in-to-next (kw)
  "Switch task from TODO to NEXT when clocking in.
Skips capture tasks and tasks with subtasks"
  (if (and (string-equal kw "TODO")
           (not (and (boundp 'org-capture-mode) org-capture-mode)))
      (let ((subtree-end (save-excursion (org-end-of-subtree t)))
            (has-subtask nil))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-not-done-keywords)
              (setq has-subtask t))))
        (when (not has-subtask)
          "STARTED"))))

    (setq org-clock-in-switch-to-state (quote bh/clock-in-to-next))
    ;; Change task state w/C-c C-t KEY
    (setq org-use-fast-todo-selection t)

    ;; shift-left and shift-right change state (as always),
    ;; but they don't trigger a prompt for notes, and timestamps, etc.
    (setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+end_src

** Custom Faces
#+begin_src emacs-lisp
   (setq org-todo-keyword-faces (quote (("TODO" :foreground "red" :weight bold)
 ("STARTED" :foreground "blue" :weight bold)
 ("DONE" :foreground "forest green" :weight bold)
 ("WAITING" :foreground "orange" :weight bold)
 ("SOMEDAY" :foreground "magenta" :weight bold)
 ("CANCELLED" :foreground "forest green" :weight bold)
 ("OPEN" :foreground "blue" :weight bold)
 ("PROJECT" :foreground "red" :weight bold))))
#+end_src

#+begin_src emacs-lisp
  ;; Don't allow setting a task to DONE if it has TODO 
  ;; subtasks
  (setq org-enforce-todo-dependencies t)
#+end_src
* Agenda
** Tweaks
#+begin_src emacs-lisp
;; Use 'w' to refile stuph (you can still use v-w to go to week mode)
(org-defkey org-agenda-mode-map "w" 'org-agenda-refile)

;; Log journal entries to this file.
(setq org-agenda-diary-file njn/journal-org-file)

;; Start the weekly agenda today
(setq org-agenda-start-on-weekday nil)

;; Display tags farther right
(setq org-agenda-tags-column -102)

;; Keep tasks with dates off the global todo lists
(setq org-agenda-todo-ignore-with-date t)

;; In agenda searches, indent the search results according to their
;;   indent level.  This helps to show sub-items in agenda searches
(setq org-tags-match-list-sublevels 'indented)

;; Agenda clock report parameters (no links, 6 levels deep)
(setq org-agenda-clockreport-parameter-plist (quote (:link t :maxlevel 6)))

#+end_src
** Misc Functions
#+begin_src emacs-lisp
(defun njn/is-project-p ()
  "Any task with a todo keyword subtask"
  (let ((has-subtask)
        (subtree-end (save-excursion (org-end-of-subtree t))))
    (save-excursion
      (forward-line 1)
      (while (and (not has-subtask)
                  (< (point) subtree-end)
                  (re-search-forward "^\*+ " subtree-end t))
        (when (member (org-get-todo-state) org-todo-keywords-1)
          (setq has-subtask t))))
    has-subtask))

(defun njn/skip-non-projects ()
  "Skip trees that are not projects"
  (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (njn/is-project-p)
        nil
      subtree-end)))
(defun njn/org-agenda ()
  "Set a variable called njn/current-buffer-file-name to record the
  name of the org-mode file that was active when org-agenda is called.  This
  variable is used by the 'Current Buffer' custom agenda view to show only
  items from the current buffer"
  (interactive)
  (setq njn/current-buffer-name (buffer-file-name))
  (org-agenda)
)

(defun njn/agenda-files-all-personal ()
  " Put all the files in my personal directory into the org-agenda-files thingy"
   (interactive)
   ;; save current settings
   (setq njn/my-agenda-files org-agenda-files)
   (setq org-agenda-files (directory-files personal-org-dir 't "^[^.].*org$"))
)

(defun njn/agenda-files-restore-original-files ()
  " Put all the files in my personal directory into the org-agenda-files thingy"
  (interactive)  
  (setq org-agenda-files njn/my-agenda-files)
)


#+end_src
** Custom Commands
#+begin_src emacs-lisp
  ; Custom agenda commands
  (setq org-agenda-custom-commands 
        (quote (
                ("c" "Select default clocking task" tags "LEVEL=1+Mgmt"
               (
                (org-agenda-overriding-header "Set default clocking task with C-u C-u I")
                (org-agenda-files (njn/personal-org-files))))

		("pt" "All Todos - simply nests all todos" tags-todo "/TODO"
		((org-agenda-overriding-header "All TODOs, nested")))
	      ("ph" "Projects" tags-todo "project|LEVEL=2-REFILE|LEVEL=1+REFILE/!-DONE-CANCELLED"
	       ((org-agenda-skip-function 'njn/skip-non-projects)
                (org-agenda-overriding-header "Projects (High Level)")))
                ("?" "Questions" (
                  (tags "question/-DONE")))
                ("." "Cur Buffer - Regular" ((agenda "" ))
                  ((org-agenda-files (list njn/current-buffer-name))
                   (org-agenda-show-log t)
                ))
		("&" "Timeline" ((agenda "" ))
                  ((org-agenda-ndays 1)
                   (org-agenda-show-log t)
		   (org-agenda-log-mode-items '(clock))
                   (org-agenda-clockreport-mode t)
                   (org-agenda-entry-types '()) ;; [1]
		  )
                  
                )
                ("," "Current Buffer - TODO" 
                  ((alltodo))
                  ((org-agenda-files (list njn/current-buffer-name))
                  ))
                ("S" "Started Tasks" todo "STARTED" ((org-agenda-todo-ignore-with-date nil)))
                ("w" "Tasks waiting on something" tags "WAITING" ((org-use-tag-inheritance nil)))
  
                ("d" "DELEGATED" tags "DELEGATED" ((org-use-tag-inheritance nil)))
                ("o" "SOMEDAY" tags "SOMEDAY" ((org-use-tag-inheritance nil)))
                ("r" "Refile New Notes and Tasks" tags "REFILE" ((org-agenda-todo-ignore-with-date nil)))
                ("*" "All Personal Files" ((agenda ""))
                 ((org-agenda-files (directory-files personal-org-dir 't "^[^.].*org$"))
                  (org-agenda-show-log t)))
                ("e" "Enrollio Agenda" agenda ""
                 ((org-agenda-files enrollio-org-files)))
                ("n" "Notesmine Agenda" agenda ""
                 ((org-agenda-files (njn/notesmine-org-files)t)))
                ("j" "Journal" agenda ""
                 ((org-agenda-files (file-expand-wildcards (concat personal-org-dir "/journal.org")))))
                ("g" "Geek Agenda" agenda ""
                 ((org-agenda-files (file-expand-wildcards (concat personal-org-dir "/*geek.org")))))
                ;; Overview mode is same as default "a" agenda-mode, except doesn't show TODO
                ;; items that are under another TODO
                ("o" "Overview" agenda "" ((org-agenda-todo-list-sublevels nil)))
        ;; Separate menu, with custom searches


        ("f" . "Custom queries") ;; gives label to "Q" 
        ("fa" "Archive search" search ""
          ((org-agenda-files (file-expand-wildcards (concat personal-org-dir "/*.org_archive")))))
        ("fn" "Notesmine search" search ""
         ((org-agenda-files (njn/notesmine-org-files))))
        ("fb" "Both Personal and Archive" search ""
          ((org-agenda-text-search-extra-files (file-expand-wildcards (concat personal-org-dir "/*.org_archive")))))
                ;; searches both projects and archive directories
        ("fA" "Archive tags search" org-tags-view "" 
         ((org-agenda-files (file-expand-wildcards "~/archive/*.org"))))
        ;; ...other commands here
        ("fp" "Personal search" search ""
                 ((org-agenda-files (njn/personal-org-files))))
         )
))

#+end_src
* Appt Notifications
#+begin_src emacs-lisp
  (setq appt-message-warning-time 15
        appt-display-mode-line t
        appt-display-format 'window)
        (appt-activate 1)
        (display-time)

  (add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)

#+end_src
* Menus
#+begin_src emacs-lisp

(easy-menu-define njn-menu org-mode-map "Nate's Org"
  '("Nate"

     ("Clock" ;; submenu
       ["In" org-clock-in]
       ["Out" org-clock-out]
       ["Resolve" org-resolve-clocks]
       ["Goto" org-clock-goto]
       )
     ("Agenda" ;; submenu
       ["Limit to file" agenda-this-file-only]
       ["Remove Limit to file" org-agenda-remove-restriction-lock]
       ["Regular View" org-agenda-list]
       ["Show Agenda" org-agenda]
       )
     )
  )
#+end_src
* Keyboard Shortcuts
** Speed Keys

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
(setq org-speed-commands-user (quote (("0" . delete-window)
                                      ("1" . delete-other-windows)
                                      ("2" . split-window-vertically)
                                      ("3" . split-window-horizontally)
                                      ("h" . hide-other)
                                      ("d" . org-cut-special)
                                      ;; Zap the current subtree                             
                                      ("q" . org-columns)
                                      ;; zoom into current header in new separate window
                                      ("z" . (lambda() (interactive) 
                                              (org-tree-to-indirect-buffer) 
                                              (other-window 1)
                                              (delete-other-windows)))
)))

#+end_src
** Misc.
#+begin_src emacs-lisp
;; Keyboard bindings
(global-set-key (kbd "<f5>") 'njn/org-agenda)
(global-unset-key (kbd "<f3>"))
(global-set-key (kbd "<f3> a") 'org-save-all-org-buffers)
(global-set-key (kbd "<f3> c") 'org-capture)
(global-set-key (kbd "<f3> f") 'org-occur-in-agenda-files)
(global-set-key (kbd "<f3> i") 'org-clock-in)
(global-set-key (kbd "<f3> j") 'org-clock-goto)
(global-set-key (kbd "<f3> l") 'agenda-this-file-only) ;; Lock agenda (and other org-functions)
(global-set-key (kbd "<f3> <f3>") 'org-mark-ring-goto)
(global-set-key (kbd "<f3> m") 'org-mark-ring-push)
(global-set-key (kbd "<f3> n") 'org-capture)
(global-set-key (kbd "<f3> o") 'org-clock-out)
(global-set-key (kbd "<f3> p") '(lambda() (interactive) (org-clock-goto 't)))
(global-set-key (kbd "<f3> r") 'org-resolve-clocks)
(global-set-key (kbd "<f3> s") 'njn/toggle-agenda-log-show-closed)
(global-set-key (kbd "<f3> u") 'org-agenda-remove-restriction-lock) ;; Undo agenda lock
(global-set-key (kbd "<f3> w") '(lambda() (interactive) (org-refile '(16))))


(global-set-key (kbd "<f9> I") 'bh/org-info)

(defun bh/org-info ()
  (interactive)
  (info "~/git/org-mode/doc/org.info"))

(global-set-key (kbd "<f9> i") 'bh/clock-in)
(global-set-key (kbd "<f9> o") 'bh/clock-out)
(global-set-key (kbd "<f9> r") 'boxquote-region)
(global-set-key (kbd "<f9> s") 'bh/go-to-scratch)

(defun bh/go-to-scratch ()
  (interactive)
  (switch-to-buffer "*scratch*")
  (delete-other-windows))

#+end_src

** Editing
#+begin_src emacs-lisp
  ;; When inserting headings, jump past the clock, and properties, and content
  ;; of current heading.
  (setq org-insert-heading-respect-content t)
  
  ;; Alt-j starts a new blank text line at the correct indent, even if 
  ;; the file's #+property indent is not set
  
  (org-defkey org-mode-map (kbd "M-j")
    '(lambda () 
     (interactive)
     (end-of-line)
     (org-return-indent)))
  
  ;; Alt-return normally breaks the headline if you press it in the
  ;; middle of a headline.  Disable that behavior
  (setq org-M-RET-may-split-line nil)
  
  ;; Insert subheading shortcuts
  (define-key org-mode-map (kbd "C-M-<return>") 'njn/org-insert-subheading)
  (define-key org-mode-map (kbd "<kp-enter>") 'org-insert-subheading)
  
  ;; Thanks to Jan Boecker for this slick function.
  (defun njn/smart-insert-heading ()
    "Insert a TODO if you're in a TODO heading, or just a blank heading 
     if you're in a blank heading."
    (interactive)
    (if (or (and (org-on-heading-p t) (org-get-todo-state))
            (org-at-item-checkbox-p))
           (call-interactively 'org-insert-todo-heading)
         (call-interactively 'org-insert-heading)))
  (
  define-key org-mode-map (kbd "M-<return>") 'njn/smart-insert-heading)
  
  (defun njn/insert-opposite-heading ()
    "Inserts a TODO heading if you're NOT in a TODO heading, and inserts a
     normal heading if you're in a TODO heading"
    (interactive)
    (if (or (and (org-on-heading-p t) (org-get-todo-state))
            (org-at-item-checkbox-p))
         (call-interactively 'org-insert-heading)
       (call-interactively 'org-insert-todo-heading)))
  
  (define-key org-mode-map (kbd "S-<return>") 'njn/insert-opposite-heading)
  
  ;; Always insert new headings under current heading
  (setq org-insert-heading-always-after-current 't)
#+end_src
* Fast Navigation to Files
  :PROPERTIES:
  :ID:       FC8A103B-5959-4A13-9735-F175C36CDC01
  :END:
  - Create an ID using org-id-get-create (See the :ID: in
    the :PROPERTIES: for this heading) 
  - Put that ID in the table below, along with your favorite shortcut
    sequence and a description
  - See "Nav Shortcuts" below for an example
  - Save oodles of time with your shortcuts, but waste the time
    writing lisp code to implement the shortcut list :-)


#+tblname:shortcut-definition-list
| Appointments       | <f6> a    | A33F7A0C-F974-4C7F-A4FD-1AAA6CF9C60E |
| bill               | <f6> b    | 519b1468-6782-48af-a3b2-c978d812c650 |
| Iteration 1        | <f6> i    | b23ce0ba-937b-447b-b87b-5448eb626465 |
| Customer 2         | <f6> m    | 49E0DC6B-D78C-4C7A-88BF-545DA0907FFE |
| Field List         | <f6> f    | f7c3f8da-5ab4-4769-ad17-27382483cb7c |
| Enrollio           | <f6> e    | 997DDAB8-DDFF-4517-90F2-CEFB0A2727E7 |
| Server Data        | <f6> s    | my_servers                           |
| Customer 1         | <f6> r    | 5C3263D1-949E-4E01-937A-201A8E83E1C0 |
| Home               | <f6> h    | 772DFBDD-38A3-4E92-8860-6904CC9D4F49 |
| Nav Shortcuts      | <f6> <f6> | FC8A103B-5959-4A13-9735-F175C36CDC01 |
| Notes              | <f6> n    | notes                                |
| Notesmine Org Mode | <f6> g    | F10D261F-0AFB-448F-BB34-8CAF652144CE |
| Org Mode           | <f6> o    | 2B8F0265-6509-4E79-9355-312F4B340503 |
| Org Mode Custom    | <f6> c    | BCFE2FAF-6510-4949-B182-66521BB14A5D |
| Vim                | <f6> v    | 733BD03F-0938-432F-B59A-BE235A2DE7E2 |

#+srcname: map-nav(shortcut-definition-list=shortcut-definition-list)
#+begin_src emacs-lisp

(require 'cl)
(defun map-navigation-shortcuts(shortcut-def)
(global-set-key (read-kbd-macro (nth 1 shortcut-def))
                 (lexical-let ((shortcut-def shortcut-def))
                   (lambda ()
                     (interactive)
                     (org-id-goto (nth 2 shortcut-def))))))
(mapcar #'map-navigation-shortcuts shortcut-definition-list)
#+end_src

* Clocking

#+begin_src emacs-lisp
  ;; Save the running clock and all clock history when exiting Emacs, load it on startup
  (require 'org-clock)
  (setq org-clock-persist 't)
  (org-clock-persistence-insinuate)

  ;; Use 10 minute increments
  (setq org-time-stamp-rounding-minutes (quote (1 10)))

  ;; Show 10 items in prev. clocked tasks.
  ;; Yes it's long... but more is better ;)
  (setq org-clock-history-length 10)

  (setq bh/keep-clock-running nil)

  (defun bh/clock-in ()
  (interactive)
  (setq bh/keep-clock-running t)
  (if (marker-buffer org-clock-default-task)
      (unless (org-clock-is-active)
        (bh/clock-in-default-task))
    (unless (marker-buffer org-clock-default-task)
      (org-agenda nil "c"))))

  (defun bh/clock-out ()
  (interactive)
  (setq bh/keep-clock-running nil)
  (when (org-clock-is-active)
    (org-clock-out)))

  (defun bh/clock-in-default-task ()
  (save-excursion
    (org-with-point-at org-clock-default-task
      (org-clock-in))))

  (defun bh/clock-out-maybe ()
  (when (and bh/keep-clock-running (not org-clock-clocking-in) (marker-buffer org-clock-default-task))
    (bh/clock-in-default-task)))

(add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)






#+end_src
* Yasnippets
** Initialization

#+begin_src emacs-lisp
;; Load Yasnippets
(add-to-list 'load-path (expand-file-name "~/.emacs.d/plugins/yasnippet"))
    (require 'yasnippet)
    (yas/initialize)
    (yas/load-directory "~/.emacs.d/plugins/yasnippet/snippets")
#+end_src


#+begin_src emacs-lisp
;; Make TAB the yas trigger key in the org-mode-hook and turn on flyspell mode
(add-hook 'org-mode-hook
          (let ((original-command (lookup-key org-mode-map [tab])))
            `(lambda ()
               (setq yas/fallback-behavior
                     '(apply ,original-command))
               (local-set-key [tab] 'yas/expand))))
#+end_src
* Refiling
#+begin_src emacs-lisp
; Refile targets default to only filez found in personal-org-files directory
(defun njn/set-default-refile-targets() 
  (interactive) 
  (setq org-refile-targets 
	(quote ((njn/personal-org-files :maxlevel . 5))))
)

(njn/set-default-refile-targets)

(defun njn/add-notesmine-to-refile-targets() 
  (interactive)
  (setq org-refile-targets 
	(quote 
	 ((njn/personal-org-files :maxlevel . 5)
          (njn/notesmine-org-files :maxlevel . 5))))
  )

(setq org-refile-allow-creating-parent-nodes 'confirm)

; Targets start with the file name - allows creating level 1 tasks
(setq org-refile-use-outline-path (quote file))

; Targets complete in steps so we start with filename, TAB shows the next level of targets etc 
(setq org-outline-path-complete-in-steps t)


#+end_src
* Publishing
#+begin_src emacs-lisp
  ; Inline images in HTML instead of producting links to the image
(setq org-export-html-inline-images t)
; Do not use sub or superscripts - I currently don't need this functionality in my documents
(setq org-export-with-sub-superscripts nil)
; Use org.css from the norang website for export document stylesheets
(setq org-export-html-style-extra "<link rel=\"stylesheet\" href=\"http://doc.norang.ca/org.css\" type=\"text/css\" />")
(setq org-export-html-style-include-default nil)
; Do not generate internal css formatting for HTML exports
(setq org-export-htmlize-output-type (quote css))

; List of projects
; orgmode.nateneff.com
; notesmine.com
(setq org-publish-project-alist
; I took this next line out -- NJN
;:publishing-directory "/ssh:www-data@www:~/www.norang.ca/htdocs"
; http://orgmode.nateneff.com/
; norang-org are the org-files that generate the content
; norang-extra are images and css files that need to be included
; norang is the top-level project that gets published
      (quote (("notesmine-com"
               :base-directory "~/Documents/notesmine-org"
               :publishing-directory "~/tmp/dangle"
               :recursive t
               :section_numbers nil
               :table-of-contents nil
               :tags nil
               :base-extension "org"
               :publishing-function org-publish-org-to-html
               :style-include-default nil
               :section-numbers nil
               :table-of-contents nil
               :style-include-default nil
               :style "<link rel=\"stylesheet\" href=\"norang.css\" type=\"text/css\">"
               :author-info nil
               :creator-info nil)
              ("notesmine-extra"
               :base-directory "~/Documents/notesmine-org"
               :base-extension "css\\|pdf\\|png\\|jpg\\|gif"
               :publishing-function org-publish-attachment
               :recursive t
               :author nil)
              ("notesmine"
               :components ("norang-org" "norang-extra"))
)))

; I'm lazy and don't want to remember the name of the project to publish when I modify
; a file that is part of a project.  So this function saves the file, and publishes
; the project that includes this file
;
; It's bound to C-S-F12 so I just edit and hit C-S-F12 when I'm done and move on to the next thing
(defun bh/save-then-publish ()
  (interactive)
  (save-buffer)
  (org-save-all-org-buffers)
  (org-publish-current-project))


#+end_src
  
* Org-habit
#+begin_src emacs-lisp
  (require 'org-habit)  
  (setq org-habit-preceding-days 0)
  (setq org-habit-following-days 0)
#+end_src
