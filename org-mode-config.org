#+property: results silent indent
* Org Mode Configuration
  :PROPERTIES:
  :ID:       BCFE2FAF-6510-4949-B182-66521BB14A5D
  :END:
* Main Settings
** Directories
Set directories here.
#+begin_src emacs-lisp
    ;; Use environment variables to set org directories
    (if 
       (getenv "ORG_DIR")
        (setq personal-org-dir (getenv "ORG_DIR"))
       (setq personal-org-dir (concat (getenv "HOME") "/Documents/personal")
    ))

    ;; define a function to read contents of personal-org-dir and
    ;; return *.org files.  Use this function when we need to know
    ;; what files are in personal-org-dir :-)

    (defun njn/personal-org-files()
       (interactive)
       (directory-files personal-org-dir 't "^[^.].*org$")
    )

    (if 
       (getenv "NOTESMINE_DIR")
        (setq njn/notesmine-dir (getenv "NOTESMINE_DIR"))
       (setq njn/notesmine-dir (concat (getenv "HOME") "/Documents/notesmine-org")
    ))


    (defun njn/notesmine-org-files()
       (interactive)
       (directory-files njn/notesmine-dir 't "^[^.].*org$")
    )

#+end_src

** Remember Files
I use three files for notes that I create using Org-mode's "Remember"
feature.

  - Notes and TODOs go to notes.org
  - Appointments go to nate.org/Appointments
  - Journal entries go to journal.org

These settings are used in the [[Remember Templates]] section of this file.

#+begin_src emacs-lisp

  (setq njn/main-org-file (concat personal-org-dir "/nate.org"))
  (setq njn/journal-org-file (concat personal-org-dir "/journal.org"))
  (setq njn/notes-org-file (concat personal-org-dir "/notes.org"))
  
#+end_src

** Task States
  - Typical
    - Todo
    - Started
    - Done
    - Cancelled
  - Non-Typical
    - Waiting means I'm waiting on someone else to proceed w/this.
    - Someday means I might consider this task
    - Delegated means some other weenie is doing this job :-)

  - @/! means leave a note and record time when entering.
  - ! means to leave a timestamp when exiting unless the next state records the time.
  - "D" means mark done/leave note, "d" is just quick "done" w/no note

#+begin_src emacs-lisp
(setq org-todo-keywords '(
(sequence "TODO(t)" "STARTED(s)" "|" "DONE(d!)")  
(sequence "WAITING(w@/@)" "|" "DELEGATED(e@/@)" "SOMEDAY(o@/@)" "CANCELLED(c@/@)")
))
#+end_src

#+begin_src emacs-lisp
    ;; From norang.org -- Change task state to STARTED from TODO when clocking in -------
    (defun bh/clock-in-to-started (kw)
      "Switch task from TODO to STARTED when clocking in"
      (if (and (string-equal kw "TODO") ;; Unless we're in a remember buffer
               (not (string-equal (buffer-name) "*Remember*")))
          "STARTED"
        nil))

    (setq org-clock-in-switch-to-state (quote bh/clock-in-to-started))
    ;; Change task state w/C-c C-t KEY
    (setq org-use-fast-todo-selection t)

    ;; shift-left and shift-right change state (as always),
    ;; but they don't trigger a prompt for notes, and timestamps, etc.
    (setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+end_src

** File Types
#+begin_src emacs-lisp
    ;; Trigger org-mode for files ending in .org .org_archive and .txt
    (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
#+end_src
* Outlines
#+begin_src emacs-lisp
  ;; Don't put blank lines after headings.
  (setq org-blank-before-new-entry (quote ((heading) (plain-list-item))))

  ;; Log notes and state changes into LOGBOOK property
  (setq org-log-into-drawer t)

  ;; Function to insert subheading here
  ;; Insert subheading right here, don't respect content
(defun njn/org-insert-subheading()
  (interactive)
  (let ((org-insert-heading-respect-content nil))
    (org-insert-subheading t)))

#+end_src
* Remember 
** Initialization
#+begin_src emacs-lisp
   


;; Integrate org-mode w/remember
(add-to-list 'load-path "~/.emacs.d/remember")
(require 'remember)
(org-remember-insinuate)
#+end_src

** Custom Remember Functions
#+begin_src emacs-lisp
(defun njn/clock-in-interrupted-task ()
 "Clock in the interrupted task if there is one"
 (interactive)
 (if (and (not org-clock-resolving-clocks-due-to-idleness)
          (marker-buffer org-clock-marker)
          (marker-buffer org-clock-interrupted-task)
          (y-or-n-p "Clock back in to prev. task? "))
     (org-with-point-at org-clock-interrupted-task
       (org-clock-in nil))))
#+end_src
** Clock Settings
#+begin_src emacs-lisp
  ;; Separate drawers for clocking and logs
  (setq org-drawers (quote ("PROPERTIES" "LOGBOOK" "CLOCK")))
  ;; Save clock data in the CLOCK drawer and state changes and notes in the LOGBOOK drawer
  (setq org-clock-into-drawer "CLOCK")
  ;; Don't clock out when moving task to a done state
  (setq org-clock-out-when-done nil)

  ;; Start clock in a remember buffer and switch back to previous clocking task on save
  (add-hook 'remember-mode-hook 'org-clock-in 'append)
  (add-hook 'org-remember-before-finalize-hook 'njn/clock-in-interrupted-task)
  ;; Keep clocks running
  (setq org-remember-clock-out-on-exit nil)
  ;; Automatically clock in when adding a note
  (add-hook 'remember-mode-hook 'org-clock-in 'append)
#+end_src
** Remember Templates
#+begin_src emacs-lisp
  
  
  (setq org-remember-templates
     (list
        (list "Appointment" ?a "* %?\n  %U" njn/main-org-file "Appointments" nil)
        (list "Journal" ?j "* %U %?\n\n  %i\n  %a" njn/journal-org-file "X" 'my-check)
        (list "Todo" ?t "* TODO %?\n\n%U  %i" njn/notes-org-file 'top)
        (list "Note" ?n "* %?" njn/notes-org-file 'top nil)
  ))
#+end_src
* Tasks / TODOs
#+begin_src emacs-lisp
  ;; org-checklist can un-set all checkboxes after you mark a task as
  ;; DONE.  Handy for recurring tasks.
  (require 'org-checklist)
#+end_src

** Custom Faces
#+begin_src emacs-lisp
   (setq org-todo-keyword-faces (quote (("TODO" :foreground "red" :weight bold)
 ("STARTED" :foreground "blue" :weight bold)
 ("DONE" :foreground "forest green" :weight bold)
 ("WAITING" :foreground "orange" :weight bold)
 ("SOMEDAY" :foreground "magenta" :weight bold)
 ("CANCELLED" :foreground "forest green" :weight bold)
 ("OPEN" :foreground "blue" :weight bold)
 ("PROJECT" :foreground "red" :weight bold))))
#+end_src

#+begin_src emacs-lisp
  ;; Don't allow setting a task to DONE if it has TODO 
  ;; subtasks
  (setq org-enforce-todo-dependencies t)
#+end_src
* Agenda
** Tweaks
#+begin_src emacs-lisp
;; Log journal entries to this file.
(setq org-agenda-diary-file njn/journal-org-file)

;; Start the weekly agenda today
(setq org-agenda-start-on-weekday nil)

;; Display tags farther right
(setq org-agenda-tags-column -102)

;; Keep tasks with dates off the global todo lists
(setq org-agenda-todo-ignore-with-date t)

;; In agenda searches, indent the search results according to their
;;   indent level.  This helps to show sub-items in agenda searches
(setq org-tags-match-list-sublevels 'indented)
#+end_src
** Misc Functions
#+begin_src emacs-lisp

(defun njn/org-agenda ()
  "Set a variable called njn/current-buffer-file-name to record the
  name of the org-mode file that was active when org-agenda is called.  This
  variable is used by the 'Current Buffer' custom agenda view to show only
  items from the current buffer"
  (interactive)
  (setq njn/current-buffer-name (buffer-file-name))
  (org-agenda)
)
#+end_src
** Custom Commands
#+begin_src emacs-lisp
  ; Custom agenda commands
  (setq org-agenda-custom-commands 
        (quote (
                ("p" "Projects/issues/questions" (
                     (tags-todo "project|issue|question/!-DONE")
                      (tags "question/-DONE")))
                ("." "Cur Buffer - Regular" ((agenda "" ))
                  ((org-agenda-files (list njn/current-buffer-name))
                   (org-agenda-show-log t))
                )
                ("," "Current Buffer - TODO" 
                  ((alltodo))
                  ((org-agenda-files (list njn/current-buffer-name))
                  ))
                ("S" "Started Tasks" todo "STARTED" ((org-agenda-todo-ignore-with-date nil)))
                ("w" "Tasks waiting on something" tags "WAITING" ((org-use-tag-inheritance nil)))
  
                ("d" "DELEGATED" tags "DELEGATED" ((org-use-tag-inheritance nil)))
                ("o" "SOMEDAY" tags "SOMEDAY" ((org-use-tag-inheritance nil)))
                ("r" "Refile New Notes and Tasks" tags "REFILE" ((org-agenda-todo-ignore-with-date nil)))
                ("*" "All Personal Files" ((agenda ""))
                 ((org-agenda-files (directory-files personal-org-dir 't "^[^.].*org$"))
                  (org-agenda-show-log t)))
                ("e" "Enrollio Agenda" agenda ""
                 ((org-agenda-files enrollio-org-files)))
                ("n" "Notesmine Agenda" agenda ""
                 ((org-agenda-files njn/notesmine-org-files)))
                ("j" "Journal" agenda ""
                 ((org-agenda-files (file-expand-wildcards (concat personal-org-dir "/journal.org")))))
                ("g" "Geek Agenda" agenda ""
                 ((org-agenda-files (file-expand-wildcards (concat personal-org-dir "/*geek.org")))))
                ;; Overview mode is same as default "a" agenda-mode, except doesn't show TODO
                ;; items that are under another TODO
                ("o" "Overview" agenda "" ((org-agenda-todo-list-sublevels nil)))
                ;; Separate menu, with custom searches
                ("fa" "Archive search" search ""
                 ((org-agenda-files (file-expand-wildcards (concat personal-org-dir "/*.org_archive")))))
                ("fn" "Notesmine search" search ""
                 ((org-agenda-files notesmine-org-files)))
                ("fp" "Personal search" search ""
                 ((org-agenda-files personal-org-files)))
                ("fe" "Enrollio search" search ""
                 ((org-agenda-files enrollio-org-files)))
                )))
#+end_src
* Appt Notifications
#+begin_src emacs-lisp
  (setq appt-message-warning-time 15
        appt-display-mode-line t
        appt-display-format 'window)
        (appt-activate 1)
        (display-time)

  (add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)

#+end_src
* Menus
#+begin_src emacs-lisp

(easy-menu-define njn-menu org-mode-map "Nate's Org"
  '("Nate"

     ("Clock" ;; submenu
       ["In" org-clock-in]
       ["Out" org-clock-out]
       ["Resolve" org-resolve-clocks]
       ["Goto" org-clock-goto]
       )
     ("Agenda" ;; submenu
       ["Limit to file" agenda-this-file-only]
       ["Remove Limit to file" org-agenda-remove-restriction-lock]
       ["Regular View" org-agenda-list]
       ["Show Agenda" org-agenda]
       )
     )
  )
#+end_src
* Keyboard Shortcuts
** Speed Keys

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
(setq org-speed-commands-user (quote (("0" . delete-window)
                                      ("1" . delete-other-windows)
                                      ("2" . split-window-vertically)
                                      ("3" . split-window-horizontally)
                                      ("h" . hide-other)
                                      ("k" . org-kill-note-or-show-branches)
                                      ;; Zap the current subtree
                                      ("d" . org-cut-special)
                                      ("r" . org-reveal))))

#+end_src
** Misc.
#+begin_src emacs-lisp
;; Keyboard bindings
(global-set-key (kbd "<f5>") 'njn/org-agenda)
(global-unset-key (kbd "<f3>"))
(global-set-key (kbd "<f3> a") 'org-save-all-org-buffers)
(global-set-key (kbd "<f3> f") 'org-occur-in-agenda-files)
(global-set-key (kbd "<f3> i") 'org-clock-in)
(global-set-key (kbd "<f3> j") 'org-clock-goto)
;; Lock agenda (and other org-functions)
(global-set-key (kbd "<f3> l") 'agenda-this-file-only)
(global-set-key (kbd "<f3> <f3>") 'org-mark-ring-goto)
(global-set-key (kbd "<f3> m") 'org-mark-ring-push)
(global-set-key (kbd "<f3> n") 'org-remember)
(global-set-key (kbd "<f3> o") 'org-clock-out)
(global-set-key (kbd "<f3> p") '(lambda() (interactive) (org-clock-goto 't)))
(global-set-key (kbd "<f3> r") 'org-resolve-clocks)
(global-set-key (kbd "<f3> s") 'njn/toggle-agenda-log-show-closed)
(global-set-key (kbd "<f3> u") 'org-agenda-remove-restriction-lock) ;; Undo agenda lock
#+end_src

** Editing
#+begin_src emacs-lisp

  ;; When inserting headings, jump past the clock, and properties, and content
  ;; of current heading.
  (setq org-insert-heading-respect-content t)

  ;; Alt-j starts a new blank text line at the correct indent, even if 
  ;; the file's #+property indent is not set

  (org-defkey org-mode-map (kbd "M-j")
    '(lambda () 
     (interactive)
     (end-of-line)
     (org-return-indent)))

  ;; Alt-return normally breaks the headline if you press it in the
  ;; middle of a headline.  Disable that behavior
  (setq org-M-RET-may-split-line nil)

  ;; Insert subheading shortcuts
  (define-key org-mode-map (kbd "C-M-<return>") 'njn/org-insert-subheading)
  (define-key org-mode-map (kbd "<kp-enter>") 'org-insert-subheading)


#+end_src
* Fast Navigation to Files
#+begin_src emacs-lisp

(global-set-key "\C-cb" 'org-iswitchb)

(global-set-key (kbd "<f6> v") (lambda () "Goto Vim"
    (interactive)
    (org-id-goto "733BD03F-0938-432F-B59A-BE235A2DE7E2")))

 


(global-set-key (kbd "<f6> f") (lambda () "Goto Foo Org File"
    (interactive)
    (org-id-goto "F3B14102-A66D-408C-8833-1F9CF7E5047C")))

(global-set-key (kbd "<f6> m") (lambda () "Goto some task"
    (interactive)
    (org-id-goto "49E0DC6B-D78C-4C7A-88BF-545DA0907FFE"))) 

(global-set-key (kbd "<f6> e") (lambda () "Goto Enrollio"
    (interactive)
    (org-id-goto "997DDAB8-DDFF-4517-90F2-CEFB0A2727E7")))

(global-set-key (kbd "<f6> a") (lambda () "Goto Appointments"
    (interactive)
    (org-id-goto "A33F7A0C-F974-4C7F-A4FD-1AAA6CF9C60E")))

(global-set-key (kbd "<f6> b") (lambda () "Goto Byteworks"
    (interactive)
    (org-id-goto "BFBDC32E-915B-418A-9B94-9791CDA49DD3"))) 

(global-set-key (kbd "<f6> c") (lambda () "Org Mode Custom"
    (interactive)
    (org-id-goto "BCFE2FAF-6510-4949-B182-66521BB14A5D")))

(global-set-key (kbd "<f6> o") 'njn/goto-org-mode-task)
(global-set-key (kbd "<f6> g") 'njn/goto-org-mode-notesmine)
(global-set-key (kbd "<f6> h") 'njn/goto-home)
(global-set-key (kbd "<f6> l") 'njn/goto-customer1)

(defun njn/goto-org-mode-task()
  "Goto umbrella org-mode task" 
  (interactive) 
  (org-id-goto "2B8F0265-6509-4E79-9355-312F4B340503"))


(defun njn/goto-org-mode-notesmine()
  "Goto notesmine org-mode file" 
  (interactive) 
  (org-id-goto "F10D261F-0AFB-448F-BB34-8CAF652144CE"))


(global-set-key (kbd "<f6> n") 'njn/goto-notes)
(defun njn/goto-notes()
  "Goto notes org-mode file" 
  (interactive) 
  (org-id-goto "7E945130-2544-4600-A46E-07B774601C80"))


(defun njn/goto-home()
  "Goto notes org-mode file" 
  (interactive) 
  (org-id-goto "772DFBDD-38A3-4E92-8860-6904CC9D4F49"))


(defun njn/goto-customer1()
  "Goto customer1's org-mode file" 
  (interactive) 
  (org-id-goto "5C3263D1-949E-4E01-937A-201A8E83E1C0"))




#+end_src

#+results:
: njn/goto-customer1
* Clocking

#+begin_src emacs-lisp
  ;; Save the running clock and all clock history when exiting Emacs, load it on startup
  (require 'org-clock)
  (setq org-clock-persist 't)
  (org-clock-persistence-insinuate)

  ;; Use 10 minute increments
  (setq org-time-stamp-rounding-minutes (quote (1 10)))

  ;; Show 10 items in prev. clocked tasks.
  ;; Yes it's long... but more is better ;)
  (setq org-clock-history-length 10)
#+end_src
* Yasnippets
** Initialization

#+begin_src emacs-lisp
;; Load Yasnippets
(add-to-list 'load-path (expand-file-name "~/.emacs.d/plugins/yasnippet"))
    (require 'yasnippet)
    (yas/initialize)
    (yas/load-directory "~/.emacs.d/plugins/yasnippet/snippets")
#+end_src


#+begin_src emacs-lisp
;; Make TAB the yas trigger key in the org-mode-hook and turn on flyspell mode
(add-hook 'org-mode-hook
          (let ((original-command (lookup-key org-mode-map [tab])))
            `(lambda ()
               (setq yas/fallback-behavior
                     '(apply ,original-command))
               (local-set-key [tab] 'yas/expand))))
#+end_src
* Refiling
#+begin_src emacs-lisp
; Refile targets default to only filez found in personal-org-files directory
(defun njn/set-default-refile-targets() 
  (interactive) 
  (setq org-refile-targets 
	(quote ((njn/personal-org-files :maxlevel . 5))))
)

(njn/set-default-refile-targets)

(defun njn/add-notesmine-to-refile-targets() 
  (interactive)
  (setq org-refile-targets 
	(quote 
	 ((njn/personal-org-files :maxlevel . 5)
          (njn/notesmine-org-files :maxlevel . 5))))
  )

(setq org-refile-allow-creating-parent-nodes 'confirm)

; Targets start with the file name - allows creating level 1 tasks
(setq org-refile-use-outline-path (quote file))

; Targets complete in steps so we start with filename, TAB shows the next level of targets etc 
(setq org-outline-path-complete-in-steps t)


#+end_src
* Publishing
** Publishing
#+begin_src emacs-lisp
  ; Inline images in HTML instead of producting links to the image
(setq org-export-html-inline-images t)
; Do not use sub or superscripts - I currently don't need this functionality in my documents
(setq org-export-with-sub-superscripts nil)
; Use org.css from the norang website for export document stylesheets
(setq org-export-html-style-extra "<link rel=\"stylesheet\" href=\"http://doc.norang.ca/org.css\" type=\"text/css\" />")
(setq org-export-html-style-include-default nil)
; Do not generate internal css formatting for HTML exports
(setq org-export-htmlize-output-type (quote css))

; List of projects
; orgmode.nateneff.com
; notesmine.com
(setq org-publish-project-alist
; I took this next line out -- NJN
;:publishing-directory "/ssh:www-data@www:~/www.norang.ca/htdocs"
; http://orgmode.nateneff.com/
; norang-org are the org-files that generate the content
; norang-extra are images and css files that need to be included
; norang is the top-level project that gets published
      (quote (("notesmine-com"
               :base-directory "~/Documents/notesmine-org"
               :publishing-directory "~/tmp/dangle"
               :recursive t
               :section_numbers nil
               :table-of-contents nil
               :tags nil
               :base-extension "org"
               :publishing-function org-publish-org-to-html
               :style-include-default nil
               :section-numbers nil
               :table-of-contents nil
               :style-include-default nil
               :style "<link rel=\"stylesheet\" href=\"norang.css\" type=\"text/css\">"
               :author-info nil
               :creator-info nil)
              ("notesmine-extra"
               :base-directory "~/Documents/notesmine-org"
               :base-extension "css\\|pdf\\|png\\|jpg\\|gif"
               :publishing-function org-publish-attachment
               :recursive t
               :author nil)
              ("notesmine"
               :components ("norang-org" "norang-extra"))
)))

; I'm lazy and don't want to remember the name of the project to publish when I modify
; a file that is part of a project.  So this function saves the file, and publishes
; the project that includes this file
;
; It's bound to C-S-F12 so I just edit and hit C-S-F12 when I'm done and move on to the next thing
(defun bh/save-then-publish ()
  (interactive)
  (save-buffer)
  (org-save-all-org-buffers)
  (org-publish-current-project))


#+end_src
** Jekyll
#+begin_src emacs-lisp

(require 'org-publish)
(require 'org-jekyll)

(add-to-list 'org-publish-project-alist
             `("crazynate"
               :base-directory "~/Documents/crazynate/content/"
               :recursive t
               :exclude "blog.org\\|blog_ideas.org"
               :base-extension "org"
               :publishing-directory "~/Documents/crazynate/"
               :blog-publishing-directory "~/Documents/crazynate/content/"
               :publishing-function org-publish-org-to-html
               :section-numbers nil
               :headline-levels 4
               :table-of-contents nil
               :auto-index nil
               :auto-preamble nil
               :body-only t
               :tags nil
               :auto-postamble nil))

#+end_src
	       
