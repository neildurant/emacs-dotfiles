#+property: results silent indent
* Summary
:PROPERTIES:
:ID: org-mode-config
:END:
this section is just a summary of stuff I want to remember about how I
use org-mode
** Refiling
- M-x njn/refile-targets-notesmine when refiling to notesmine
- M-x njn/refile-targets-personal when refiling to my personal stuff
- M-x njn/refile-targets-only-this-file when refiling within one file,
  to speed things up
#+begin_src emacs-lisp
(require 'org-id)
(setq org-columns-default-format
"%12CATEGORY%40ITEM(Task) %7Effort(Est.){:} %CLOCKSUM(Clock) %SCHEDULED(Sched) %16TAGS")
(setq org-global-properties
'(("Effort_ALL". "1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00 0:30 0:15")))
#+end_src
** Clocking
#+begin_src emacs-lisp
(setq org-clock-out-remove-zero-time-clocks 't)
(setq org-clock-modeline-total 'today)
#+end_src
** Scheduling/Agenda
Use the "reg" keyword for items that I only want to see the next
occurrence of in the agenda.  For example "Excercise", "Take over the
world", etc.

For regularly occurring appointments, like STLCoders, use an active
timestamp with +1w, and don't use a TODO keyword.  You will see future
appointments for these in the agenda.
* Directories
Set directories here.
#+begin_src emacs-lisp
    ;; Use environment variables to set org directories
    (if 
       (getenv "ORG_DIR")
        (setq personal-org-dir (getenv "ORG_DIR"))
       (setq personal-org-dir (concat (getenv "HOME") "/Documents/personal")
    ))

    ;; define a function to read contents of personal-org-dir and
    ;; return *.org files.  Use this function when we need to know
    ;; what files are in personal-org-dir :-)

    (defun njn/personal-org-files()
       (interactive)
       (load-library "find-lisp")
       (find-lisp-find-files personal-org-dir "^[^.].*org$")
    )

    (if 
       (getenv "NOTESMINE_DIR")
        (setq njn/notesmine-dir (getenv "NOTESMINE_DIR"))
       (setq njn/notesmine-dir (concat (getenv "HOME") "/Documents/notesmine")
    ))


    (defun njn/notesmine-org-files()
       (interactive)
       (directory-files njn/notesmine-dir 't "^[^.].*org$")
    )

#+end_src

** File Types
#+begin_src emacs-lisp
    ;; Trigger org-mode for files ending in .org .org_archive and .txt
    (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
#+end_src
* Outlines
#+begin_src emacs-lisp
  ;; Don't put blank lines after headings.
  (setq org-blank-before-new-entry (quote ((heading) (plain-list-item))))

  (setq org-log-done (quote time))
  ;; Log notes and state changes into LOGBOOK property
  (setq org-log-into-drawer t)
  (setq org-startup-indented t)

  ;; Function to insert subheading here
  ;; Insert subheading right here, don't respect content
  (defun njn/org-insert-subheading()
    (interactive)
    (let (org-insert-heading-respect-content nil))
    (org-insert-subheading t))


  ;; When inserting headings, jump past the clock, and properties, and content
  ;; of current heading.
  (setq org-insert-heading-respect-content nil)

  ;; Alt-return normally breaks the headline if you press it in the
  ;; middle of a headline.  Disable that behavior
  (setq org-M-RET-may-split-line nil)
  
  ;; Thanks to Jan Boecker for this slick function.
  (defun njn/smart-insert-heading ()
    "Insert a todo if you're in a todo heading, or just a blank heading 
     if you're in a blank heading."
    (interactive)
    (if (or (and (org-on-heading-p t) (org-get-todo-state))
            (org-at-item-checkbox-p))
           (call-interactively 'org-insert-todo-heading)
         (call-interactively 'org-insert-heading)))

  (defun njn/smart-insert-subheading ()
    "Insert a todo if you're in a todo heading, or just a blank heading 
     if you're in a blank heading."
    (interactive)
    (if (or (and (org-on-heading-p t) (org-get-todo-state))
            (org-at-item-checkbox-p))
           (call-interactively 'org-insert-todo-subheading)
         (call-interactively 'org-insert-subheading)))  

  (defun njn/insert-opposite-heading ()
    "Inserts a todo heading if you're NOT in a todo heading, and inserts a
     normal heading if you're in a todo heading"
    (interactive)
    (if (or (and (org-on-heading-p t) (org-get-todo-state))
            (org-at-item-checkbox-p))
         (call-interactively 'org-insert-heading)
       (call-interactively 'org-insert-todo-heading)))
  

  
  ;; Always insert new headings under current heading
  (setq org-insert-heading-always-after-current 't)



#+end_src
* Capture
  - Virtually everything goes to refile.org, to be refiled later.
  - Journal entries go to journal.org

#+begin_src emacs-lisp
  (setq njn/journal-org-file (concat personal-org-dir "/journal.org"))
  (setq njn/work-journal-file (concat personal-org-dir "/work-journal.org"))
  (setq njn/refile-org-file (concat personal-org-dir "/refile.org"))  
  
  (setq org-capture-templates 
        `(
          ("d" "Details" entry (clock) "* %? :details:\n%i\n" :prepend t :clock-in t :clock-resume t)       
          ("w" "Work Journal" entry (file+datetree+prompt, njn/work-journal-file) "* %?\nEntered on %u\n  %i\n%a")   
          ("j" "Journal" entry (file+datetree+prompt, njn/journal-org-file) "* %?\nEntered on %u\n  %i\n%a")   
          ("c" "Customer Log" entry (id, "customer_log") "* %u %?\n\n%U" :prepend t)
          ("N" "Note Detailed" entry (file, njn/refile-org-file) "* %?\n%i\n%a" :prepend t :clock-in t :clock-resume t)
          ("n" "Note Simple" entry (file, njn/refile-org-file) "* %? \n%i\n%U\n")
          ("T" "Todo" entry (file, njn/refile-org-file) "* todo %? \n%i\n%U  %i\n%a" :clock-in t :clock-resume t)
          ("t" "Todo Simple" entry (file, njn/refile-org-file) "* todo %? \n%i\n%U\n")
          ("s" "Start Task" entry (file, njn/refile-org-file) "* todo %? \n%i\n%U  %i\n%a" :clock-in t :clock-keep t)
          ("q" "Question" entry (file, njn/refile-org-file) "* todo %? :question: \n%i\n%U  %i\n%a" :clock-in t :clock-resume t)
        )
  )  
#+end_src
* Clock Settings
#+begin_src emacs-lisp
  ;; Separate drawers for clocking and logs
  (setq org-drawers (quote ("PROPERTIES" "LOGBOOK" "CLOCK")))
  ;; Save clock data in the clock drawer and state changes and notes in the LOGBOOK drawer
  (setq org-clock-into-drawer "CLOCK")
  ;; Don't clock out when moving task to a done state
  (setq org-clock-out-when-done nil)
  ;; Keep clocks running
  (setq org-remember-clock-out-on-exit nil)
  (setq org-clock-modeline-total 'today)
#+end_src
* Tasks / todos
#+begin_src emacs-lisp
  ;; org-checklist can un-set all checkboxes after you mark a task as
  ;; DONE.  Handy for recurring tasks.
  (require 'org-checklist)
  (setq org-enforce-todo-checkbox-dependencies 't)
#+end_src

** Task States
  - Typical
    - Todo
    - Started
    - Done
    - Cancelled
  - Non-Typical
    - Waiting means I'm waiting on someone else to proceed w/this.
    - Someday means I might consider this task
    - Delegated means some other weenie is doing this job :-)

  - @/! means leave a note and record time when entering.
  - ! means to leave a timestamp when exiting unless the next state
    records the time.
  - "D" means mark done/leave note, "d" is just quick "done" w/no note

#+begin_src emacs-lisp
(setq org-todo-keywords '(
(sequence "todo(t)" "started(s)" "next(n)" "|" "done(d!)")
(sequence "reg(r)" "|" "done(d!)")
(sequence "TODO(a)" "NEXT(f)" "|" "DONE(g!)")
(sequence "waiting(w@/@)" "|" "delegated(e@/@)" "maybe(m)" "someday(o)" "cancelled(c)" "tbv(b)")
(sequence "WAITING(h@/@)" "|" "DELEGATED(i@/@)" "MAYBE(j)" "SOMEDAY(k)" "CANCELLED(c)" "TBV(l)")
))
#+end_src

#+begin_src emacs-lisp
    ;; From norang.org -- Change task state to STARTED from TODO when clocking in -------
(defun bh/clock-in-to-next (kw)
  "Switch task from todo to NEXT when clocking in.
Skips capture tasks and tasks with subtasks"
  (if (and (string-equal kw "todo")
           (not (and (boundp 'org-capture-mode) org-capture-mode)))
      (let ((subtree-end (save-excursion (org-end-of-subtree t)))
            (has-subtask nil))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-not-done-keywords)
              (setq has-subtask t))))
        (when (not has-subtask)
          "started"))))
    ;; Not doing this anymore - Must follow Bernt's org-setup!!!
    ;; (setq org-clock-in-switch-to-state (quote bh/clock-in-to-next))
    ;; Change task state w/C-c C-t KEY
    (setq org-use-fast-todo-selection t)

    ;; shift-left and shift-right change state (as always),
    ;; but they don't trigger a prompt for notes, and timestamps, etc.
    (setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+end_src

** Custom Faces
#+begin_src emacs-lisp
   (setq org-todo-keyword-faces (quote (
 ("todo" :foreground "brown" :weight bold)
 ("started" :foreground "black" :weight bold)
 ("next" :foreground "blue" :weight normal)
 ("reg" :foreground "steelblue" :weight normal)
 ("done" :foreground "forest green" :weight normal)
 ("waiting" :foreground "orange" :weight normal)
 ("someday" :foreground "seashell4" :weight normal)
 ("cancelled" :foreground "forest green" :weight normal)
 ("open" :foreground "blue" :weight normal)
 ("project" :foreground "red" :weight normal)
 ("maybe" :foreground "purple" :weight normal))))
#+end_src

#+begin_src emacs-lisp
  ;; Don't allow setting a task to DONE if it has todo 
  ;; subtasks
  (setq org-enforce-todo-dependencies t)
#+end_src
* Agenda
** Tweaks
#+begin_src emacs-lisp
;; Redefine "s" key in agenda to schedule.
;; It's originally assigned to "save all org buffers", which is F3-a for me.
(add-hook 'org-agenda-mode-hook
             '(lambda ()
                (define-key org-agenda-mode-map "s" 'org-agenda-schedule)
                ;; Use 'w' to refile stuph (you can still use v-w to go to week mode)
                (define-key org-agenda-mode-map "w" 'org-agenda-refile)
                (define-key org-agenda-mode-map (kbd "<C-f4>") 'org-agenda-quit)
                (define-key org-agenda-mode-map "q" 'org-agenda-columns)
))


;; Log journal entries to this file.
(setq org-agenda-diary-file njn/journal-org-file)

;; Start the weekly agenda today
(setq org-agenda-start-on-weekday nil)

;; Display tags farther right
(setq org-agenda-tags-column -102)

;; Keep tasks with dates off the global todo lists
(setq org-agenda-todo-ignore-with-date t)

;; In agenda searches, indent the search results according to their
;;   indent level.  This helps to show sub-items in agenda searches
(setq org-tags-match-list-sublevels 'indented)

;; Agenda clock report parameters (no links, 6 levels deep)
(setq org-agenda-clockreport-parameter-plist (quote (:link t :maxlevel 6 :fileskip0 t)))

;; Remove completed deadline tasks from the agenda view
(setq org-agenda-skip-deadline-if-done t)

;; Remove completed scheduled tasks from the agenda view
(setq org-agenda-skip-scheduled-if-done t)




;; No repeat in agenda for TODO, todo and "appt"
;; From http://thread.gmane.org/gmane.emacs.orgmode/36809/focus=36975
;; "appt" are just headlines with no TODO keyword.
(setq org-agenda-repeating-timestamp-show-all '("TODO" "todo" nil))

;; From http://juanreyero.com/article/emacs/org-teams.html
(setq org-tags-exclude-from-inheritance '("project")
      org-stuck-projects '("+prj/-MAYBE-DONE" 
                           ("TODO" "TASK") ()))
#+end_src
** Misc Functions
#+begin_src emacs-lisp
(setq njn/org-agenda-show-closed nil)
(defun njn/agenda-toggle-show-closed()
  "Toggle whether closed clock thingies are shown in the agenda"
  (interactive)
  (if (eq njn/org-agenda-show-closed 't)
      (progn (setq org-agenda-log-mode-items (quote (clock)))
	     (setq njn/org-agenda-show-closed nil)
	     (message "NOT Showing closed clock entries in agenda"))
    (progn (setq org-agenda-log-mode-items (quote (closed clock)))
	   (setq njn/org-agenda-show-closed 't)
	   (message "Showing closed clock entries in agenda"))
    ))

(defun njn/is-project-p ()
  "Any task with a todo keyword subtask"
  (let ((has-subtask)
        (subtree-end (save-excursion (org-end-of-subtree t))))
    (save-excursion
      (forward-line 1)
      (while (and (not has-subtask)
                  (< (point) subtree-end)
                  (re-search-forward "^\*+ " subtree-end t))
        (when (member (org-get-todo-state) org-todo-keywords-1)
          (setq has-subtask t))))
    has-subtask))

(defun njn/skip-non-projects ()
  "Skip trees that are not projects"
  (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (njn/is-project-p)
        nil
      subtree-end)))

(defun njn/agenda-this-file-only()
  (interactive)
  (setq org-agenda-files (list (buffer-file-name)))
  (org-agenda)
)

(defun njn/org-agenda ()
  "Set a variable called njn/current-buffer-file-name to record the
  name of the org-mode file that was active when org-agenda is called.  This
  variable is used by the 'Current Buffer' custom agenda view to show only
  items from the current buffer"
  (interactive)
  (setq njn/current-buffer-name (buffer-file-name))
  (org-agenda)
)

(defun njn/agenda-files-all-personal ()
  " Put all the files in my personal directory into the org-agenda-files thingy"
   (interactive)
   ;; save current settings
   (setq njn/my-agenda-files org-agenda-files)
   (setq org-agenda-files (directory-files personal-org-dir 't "^[^.].*org$"))
)

(defun njn/agenda-files-restore-original-files ()
  " Put all the files in my personal directory into the org-agenda-files thingy"
  (interactive)  
  (setq org-agenda-files njn/my-agenda-files)
)


#+end_src
** Custom Agenda Commands
#+begin_src emacs-lisp
(setq org-agenda-custom-commands 
  (quote (
    ("n" "Notesmine search" search ""
     ((org-agenda-files (njn/notesmine-org-files))))
    ("c" "Select default clocking task" tags "LEVEL=1+Mgmt"
      ((org-agenda-overriding-header "Set default clocking task with C-u C-u I")
      (org-agenda-files (njn/personal-org-files))))
    ("p" . "Custom Agenda Commands")
      ("pt" "All Todos - simply nests all todos" tags-todo "/todo"
       ((org-agenda-overriding-header "All todos, nested")))
      ("pc" "Current Projects" tags "project/-done-cancelled-DONE-CANCELLED"
       ((org-agenda-overriding-header "Current Projects (High Level)")
        (org-agenda-sorting-strategy nil)))
      ("ps" "Todo/Someday Projects" tags-todo "project-current-done-cancelled"
       ((org-agenda-overriding-header "Current Projects (High Level)")
        (org-agenda-sorting-strategy nil)))
    ("Q" "Questions" (
      (tags "question/-someday-SOMEDAY-done-cancelled-DONE-CANCELLED")))
    ("." "Cur Buffer - Timeline" ((agenda "" ))
      ((org-agenda-files (list njn/current-buffer-name))
      (org-agenda-show-log t)))
    ("7" "Timeline" ((agenda "" ))
      ((org-agenda-ndays 1)
       (org-agenda-show-log t)
       (org-agenda-log-mode-items '(clock))
       (org-agenda-clockreport-mode t)
       (org-agenda-entry-types '())))
    ("," "Current Buffer - todo" ((alltodo))
      ((org-agenda-files (list njn/current-buffer-name))))
    ("S" "next Tasks" todo "next" ((org-agenda-todo-ignore-with-date nil)))
    ("w" "Tasks waiting on something" todo "waiting" ((org-use-tag-inheritance nil)))
    ("d" "delegated" tags "delegated" ((org-use-tag-inheritance nil)))
    ("o" "someday" tags "someday" ((org-use-tag-inheritance nil)))
    ("r" "Refile New Notes and Tasks" tags "refile" ((org-agenda-todo-ignore-with-date nil)))
    ("*" "All Personal Files" ((agenda ""))
      ((org-agenda-files (directory-files personal-org-dir 't "^[^.].*org$"))
      (org-agenda-show-log t)))
    ("e" "Enrollio Agenda" agenda ""
      ((org-agenda-files enrollio-org-files)))
    ("j" "Journal" agenda ""
      ((org-agenda-files (file-expand-wildcards (concat personal-org-dir "/journal.org")))))
    ("g" "Geek Agenda" agenda ""
      ((org-agenda-files (file-expand-wildcards (concat personal-org-dir "/*geek.org")))))

    ;; Overview mode is same as default "a" agenda-mode, except doesn't show todo
    ;; items that are under another todo
    ("o" "Overview" agenda "" ((org-agenda-todo-list-sublevels nil)))
    ("f" . "Custom queries") ;; gives label to "Q" 
      ("fa" "Archive search" search ""
        ((org-agenda-files (file-expand-wildcards (concat personal-org-dir "/*.org_archive")))))
      ("fb" "Both Personal and Archive" search ""
        ((org-agenda-text-search-extra-files (file-expand-wildcards (concat personal-org-dir "/*.org_archive")))))
      ("fA" "Archive tags search" org-tags-view "" 
        ((org-agenda-files (file-expand-wildcards "~/archive/*.org"))))
      ("fp" "Personal search" search ""
        ((org-agenda-files (njn/personal-org-files))))
)))
  
#+end_src
* Menus
#+begin_src emacs-lisp

(easy-menu-define njn-menu org-mode-map "Nate's Org"
  '("Nate"
     ("Misc"
       ["Wrap Text" auto-fill-mode]
     )
     ("Clock" ;; submenu
       ["In" org-clock-in]
       ["Out" org-clock-out]
       ["Resolve" org-resolve-clocks]
       ["Goto" org-clock-goto]
       )
     ("Agenda" ;; submenu
       ["Limit to file" njn/agenda-this-file-only]
       ["Remove Limit to file" org-agenda-remove-restriction-lock]
       ["Regular View" org-agenda-list]
       ["Show Agenda" org-agenda]
       )
     )
  )
#+end_src
* Keyboard Shortcuts
** Outline / todo Bindings
#+begin_src emacs-lisp

;;  (define-key org-mode-map (kbd "C-M-<return>") 'njn/org-insert-subheading)

  ;; enter key behavior.
  ;; basically, any modifier on enter key will produce a sub todo
;;  (define-key org-mode-map (kbd "<kp-enter>") 'org-insert-subheading)
;;  (define-key org-mode-map (kbd "C-S-<kp-enter>") 'org-insert-todo-subheading)
;;  (define-key org-mode-map (kbd "C-<kp-enter>") 'org-insert-todo-subheading)
;;  (define-key org-mode-map (kbd "S-<kp-enter>") 'org-insert-todo-subheading)

  ;; M-return and M-kp-enter will create a todo if cursor is not in a todo,
  ;; and vice versa
;;  (define-key org-mode-map (kbd "M-<return>") 'njn/smart-insert-heading)
;;  (define-key org-mode-map (kbd "M-<kp-enter>") 'njn/smart-insert-subheading)
;;  (define-key org-mode-map (kbd "S-<return>") 'njn/insert-opposite-heading)  
#+end_src
** Misc. Key Bindings
:PROPERTIES:
:ID: keyboard_shortcuts
:END:
#+begin_src emacs-lisp
;; Keyboard bindings
(global-set-key (kbd "C-c l") 'org-store-link)
(global-unset-key (kbd "<f3>"))
(global-set-key (kbd "<f3> <f3>") 'org-mark-ring-goto)
(global-set-key (kbd "<f3> <") 'njn/clock-in-at-time)
(global-set-key (kbd "<f3> I") '(lambda() (interactive) (org-clock-in '(4))))
(global-set-key (kbd "<f3> P") '(lambda() (interactive) (org-clock-in '(4))))
(global-set-key (kbd "<f3> a") 'org-save-all-org-buffers)
(global-set-key (kbd "<f9>") 'org-save-all-org-buffers)
(global-set-key (kbd "<f3> b") '(lambda() (interactive) (org-toggle-checkbox '(4))))
(global-set-key (kbd "<f3> c") 'org-capture-goto-last-stored)
(global-set-key (kbd "<f3> f") 'org-occur-in-agenda-files)
(global-set-key (kbd "<f3> g") '(lambda() (interactive) (org-clock-goto 't)))
(global-set-key (kbd "<f3> i") 'org-clock-in)
(global-set-key (kbd "<f3> j") 'org-clock-goto)
(global-set-key (kbd "<f3> l") 'njn/agenda-this-file-only) ;; Lock agenda (and other org-functions)
(global-set-key (kbd "<f3> m") 'org-mark-ring-push)
(global-set-key (kbd "<f3> n") 'org-capture)
(global-set-key (kbd "<f3> o") 'org-clock-out)
(global-set-key (kbd "<f3> p") '(lambda() (interactive) (org-clock-goto 't)))
(global-set-key (kbd "<f3> r") 'org-resolve-clocks)
(global-set-key (kbd "<f3> s") 'njn/agenda-toggle-show-closed)
(global-set-key (kbd "<f3> t") 'org-todo)
(global-set-key (kbd "<f3> u") 'org-agenda-remove-restriction-lock) ;; Undo agenda lock
(global-set-key (kbd "<f3> w") '(lambda() (interactive) (org-refile '(16))))
(global-set-key (kbd "<f5>") 'njn/org-agenda)
(global-set-key (kbd "<f8>") 'org-capture)

; (global-set-key (kbd "<f9> I") 'bh/org-info)
; (global-set-key (kbd "<f9> i") 'bh/clock-in)
; (global-set-key (kbd "<f9> o") 'bh/clock-out)
; (global-set-key (kbd "<f9> r") 'boxquote-region)
; (global-set-key (kbd "<f9> s") 'bh/go-to-scratch)

(defun bh/org-info ()
  (interactive)
  (info "~/git/org-mode/doc/org.info"))

(global-set-key (kbd "<f10>") '(lambda() (interactive)
(switch-to-buffer org-agenda-buffer-name)
(delete-other-windows)))

(defun bh/go-to-scratch ()
  (interactive)
  (switch-to-buffer "*scratch*")
  (delete-other-windows))

  ;; Alt-j starts a new blank text line at the correct indent, even if 
  ;; the file's #+property indent is not set
  
  (org-defkey org-mode-map (kbd "M-j")
    '(lambda () 
     (interactive)
     (end-of-line)
     (org-return-indent)))
  
#+end_src
** Speed Keys
:PROPERTIES:
:ID: speed_keys
:END:

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
(setq org-speed-commands-user (quote (("0" . delete-window)
                                      ("1" . delete-other-windows)
                                      ("2" . split-window-vertically)
                                      ("3" . split-window-horizontally)
                                      ("c" . org-toggle-checkbox)
                                      ("d" . org-cut-special) ;; Zap the current subtree
                                      ("h" . hide-other)
                                      ("P" . org-set-property)
                                      ("q" . org-columns)
                                      
                                      ("C" . org-clock-display)
                                      ("s" . org-schedule)
                                      ;; ("z" . org-add-note)
                                      ;; zoom into current header in new separate window
                                      ("z" . (lambda() (interactive) 
                                              (org-tree-to-indirect-buffer) 
                                              (other-window 1)
                                              (delete-other-windows)))
                                      (":" . org-set-tags-command)
)))

#+end_src
* Fast Navigation to Files
  :PROPERTIES:
  :ID:       nav_shortcuts
  :END:
  - Create an ID using org-id-get-create (See the :ID: in
    the :PROPERTIES: for this heading) 
  - Put that ID in the table below, along with your favorite shortcut
    sequence and a description
  - See "Nav Shortcuts" below for an example
  - Save oodles of time with your shortcuts, but waste the time
    writing lisp code to implement the shortcut list :-)

#+TBLNAME: shortcut-definition-list
| Blog               | <f6> b    | blog                                 |
| Customer 1         | <f6> m    | customer1                            |
| Daily Hrs cust 2   | <f6> d    | daily_customer2                      |
| Enrollio           | <f6> e    | 997DDAB8-DDFF-4517-90F2-CEFB0A2727E7 |
| Field List         | <f6> f    | f7c3f8da-5ab4-4769-ad17-27382483cb7c |
| Home               | <f6> h    | 772DFBDD-38A3-4E92-8860-6904CC9D4F49 |
| Iteration 1        | <f6> i    | b23ce0ba-937b-447b-b87b-5448eb626465 |
| Log                | <f6> l    | log                                  |
| Keyboard Shortcuts | <f6> k    | keyboard_shortcuts                   |
| Nav Shortcuts      | <f6> <f6> | nav_shortcuts                        |
| Notesmine Refile   | <f6> R    | notesmine_refile                     |
| Notesmine-org      | <f6> O    | notesmine_orgmode                    |
| Org Mode           | <f6> o    | 2B8F0265-6509-4E79-9355-312F4B340503 |
| Org Mode Custom    | <f6> c    | org-mode-config                      |
| Personal Notes     | <f6> p    | 4ce7a31a-aa03-4044-8e70-95e0bfff0e05 |
| Refile             | <f6> r    | refile                               |
| Server Data        | <f6> s    | speed_keys                           |
| Terms              | <f6> t    | terms-work                           |
| Vim                | <f6> v    | 733BD03F-0938-432F-B59A-BE235A2DE7E2 |
#+TBLFM: 

#+srcname: map-nav(shortcut-definition-list=shortcut-definition-list)
#+begin_src emacs-lisp
(defun map-navigation-shortcuts(shortcut-def)
(global-set-key (read-kbd-macro (nth 1 shortcut-def))
                 (lexical-let ((shortcut-def shortcut-def))
                   (lambda ()
                     (interactive)
                     (org-id-goto (nth 2 shortcut-def))))))
(mapcar #'map-navigation-shortcuts 
'(("Blog" "<f6> b" "blog") ("Terms " "<f6> t" "terms-work")
  ("Customer 1" "<f6> m" "customer1") ("Daily Hrs cust 2" "<f6> d" "daily_customer2") ("Enrollio" "<f6> e" "997DDAB8-DDFF-4517-90F2-CEFB0A2727E7") ("Field List" "<f6> f" "f7c3f8da-5ab4-4769-ad17-27382483cb7c") ("Home" "<f6> h" "772DFBDD-38A3-4E92-8860-6904CC9D4F49") ("Iteration 1" "<f6> i" "b23ce0ba-937b-447b-b87b-5448eb626465") ("Log" "<f6> l" "log") ("Keyboard Shortcuts" "<f6> k" "keyboard_shortcuts") ("Nav Shortcuts" "<f6> <f6>" "nav_shortcuts") ("Notesmine Refile" "<f6> R" "notesmine_refile") ("Notesmine-org" "<f6> O" "notesmine_orgmode") ("Org Mode" "<f6> o" "2B8F0265-6509-4E79-9355-312F4B340503") ("Org Mode Custom" "<f6> c" "org-mode-config") ("Personal Notes" "<f6> p" "4ce7a31a-aa03-4044-8e70-95e0bfff0e05") ("Refile" "<f6> r" "refile") ("Server Data" "<f6> s" "speed_keys") ("Vim" "<f6> v" "733BD03F-0938-432F-B59A-BE235A2DE7E2"))

  
  )
#+end_src

* Clocking

#+begin_src emacs-lisp
;; Save the running clock and all clock history when exiting Emacs, load it on startup
(require 'org-clock)
(setq org-clock-persist 't)
(org-clock-persistence-insinuate)

;; Use 10 minute increments
(setq org-time-stamp-rounding-minutes (quote (1 10)))

;; Show 10 items in prev. clocked tasks.
;; Yes it's long... but more is better ;)
(setq org-clock-history-length 10)

(setq bh/keep-clock-running nil)

(defun bh/clock-in ()
(interactive)
(setq bh/keep-clock-running t)
(if (marker-buffer org-clock-default-task)
    (unless (org-clock-is-active)
      (bh/clock-in-default-task))
  (unless (marker-buffer org-clock-default-task)
    (org-agenda nil "c"))))

(defun bh/clock-out ()
(interactive)
(setq bh/keep-clock-running nil)
(when (org-clock-is-active)
  (org-clock-out)))

(defun bh/clock-in-default-task ()
(save-excursion
  (org-with-point-at org-clock-default-task
    (org-clock-in))))

(defun bh/clock-out-maybe ()
(when (and bh/keep-clock-running (not org-clock-clocking-in) (marker-buffer org-clock-default-task))
  (bh/clock-in-default-task)))

(add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

;; From http://www.mail-archive.com/emacs-orgmode@gnu.org/msg47735.html
(defun njn/clock-in-at-time()
  (interactive)
  (setq start-time (org-read-date t t))
  (org-clock-in nil start-time))
#+end_src
* Yasnippets
** Initialization

#+begin_src emacs-lisp
;; Load Yasnippets
(add-to-list 'load-path (expand-file-name "~/.emacs.d/plugins/yasnippet"))
    (require 'yasnippet)
    (yas/initialize)
    (yas/load-directory "~/.emacs.d/plugins/yasnippet/snippets")
#+end_src


#+begin_src emacs-lisp
;; Make TAB the yas trigger key in the org-mode-hook and turn on flyspell mode
(add-hook 'org-mode-hook
          (let ((original-command (lookup-key org-mode-map [tab])))
            `(lambda ()
               (setq yas/fallback-behavior
                     '(apply ,original-command))
               (local-set-key [tab] 'yas/expand))))
#+end_src
* Vimpulse
#+begin_src emacs-lisp
;(add-to-list 'load-path (expand-file-name "~/.emacs.d/plugins/vimpulse"))
;    (require 'vimpulse)
#+end_src

* Refiling
#+begin_src emacs-lisp
(setq org-refile-use-cache 't)
  ; Refile targets default to only filez found in personal-org-files directory
  (defun njn/refile-targets-personal() 
    (interactive) 
    (setq org-refile-targets 
          (quote ((njn/personal-org-files :maxlevel . 5))))
  )
    
  (defun njn/refile-targets-notesmine() 
    (interactive)
    (setq org-refile-targets 
          (quote ((njn/notesmine-org-files :maxlevel . 5))))
  )
  (njn/refile-targets-personal)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  
  ; Targets start with the file name - allows creating level 1 tasks
  (setq org-refile-use-outline-path (quote file))
  
  ; Targets complete in steps so we start with filename, TAB shows the next level of targets etc 
  (setq org-outline-path-complete-in-steps t)

  (defun njn/refile-targets-only-this-file()
  (interactive)
  (setq org-refile-targets (quote((nil :maxlevel . 3))))
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-refile-use-outline-path 't)
)

#+end_src
* Publishing
#+begin_src emacs-lisp
  ; Inline images in HTML instead of producting links to the image
(setq org-export-html-inline-images t)
; Do not use sub or superscripts - I currently don't need this functionality in my documents
(setq org-export-with-sub-superscripts nil)
; Do not generate internal css formatting for HTML exports
(setq org-export-htmlize-output-type (quote css))

; List of projects
; orgmode.nateneff.com
; notesmine.com
(setq org-publish-project-alist
`(("notesmine-com"
               :auto-sitemap t
               :sitemap-filename "index.org"
               :sitemap-title "Notesmine.com"
               :base-directory ,njn/notesmine-dir
               :publishing-directory "~/tmp/notesmine.com"
               :recursive t
               :section_numbers nil
               :table-of-contents nil
               :tags nil
               :style "<link rel=\"stylesheet\" href=\"css/notesmine.css\" type=\"text/css\" />"
               :style-include-default nil
               :base-extension "org"
               :publishing-function org-publish-org-to-html
               :section-numbers nil
               :table-of-contents nil
               :author-info nil
               :creator-info nil)
              ("notesmine-extra"
               :base-directory ,njn/notesmine-dir
               :publishing-directory "~/tmp/notesmine.com"
               :base-extension "css\\|pdf\\|png\\|jpg\\|gif"
               :publishing-function org-publish-attachment
               :recursive t
               :author nil)
              ("notesmine"
               :components ("notesmine-extra" "notesmine-com"))
))

; I'm lazy and don't want to remember the name of the project to publish when I modify
; a file that is part of a project.  So this function saves the file, and publishes
; the project that includes this file
;
; It's bound to C-S-F12 so I just edit and hit C-S-F12 when I'm done and move on to the next thing
(defun bh/save-then-publish ()
  (interactive)
  (save-buffer)
  (org-save-all-org-buffers)
  (org-publish-current-project))


#+end_src
  
* Org-babel
#+begin_src emacs-lisp
(setq org-src-fontify-natively t) ;; Show cool font highlighting
;; in :source blocks
(org-babel-do-load-languages
    'org-babel-load-languages
    '((ruby . t)
      (perl . t)
      (clojure . t)
      (sh   . t))
)
#+end_src
* Org-habit
#+begin_src emacs-lisp
  (require 'org-habit)  
  (setq org-habit-preceding-days 0)
  (setq org-habit-following-days 0)
#+end_src
* Custom Blocks / Functions
#+begin_src emacs-lisp
;; This is from Matt Lundin on the Org-mode list
;; It's used to query for headlines with tags that match the :match parameter
;; You can use it by putting something like this in your org file:
;; #+begin: insert-links :match questions
;; #+end:
(defun org-dblock-write:insert-links (params)
 "Dblock function to insert links to headlines that match
tags/properties search string specified by :match."
 (let ((match (plist-get params :match))
       links)
   (unless match
     (error "Must specify :match parameter"))
   (org-map-entries
    (lambda ()
      (let ((heading (nth 4 (org-heading-components))))
        (add-to-list 'links
                     (format "- [[file:%s::*%s][%s]]\n"
                             (abbreviate-file-name
                              (buffer-file-name))
                             heading heading))))
    match 'agenda)
   (apply #'insert links)))
#+end_src
