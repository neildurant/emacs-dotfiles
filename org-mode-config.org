#+property: results silent
* Org Mode Configuration
  :PROPERTIES:
  :ID:       BCFE2FAF-6510-4949-B182-66521BB14A5D
  :END:
* Main Settings
** TODO Directories
Set directories here.
#+begin_src emacs-lisp
    ;; Use environment variables to set org directories
    (if 
       (getenv "ORG_DIR")
        (setq personal-org-dir (getenv "ORG_DIR"))
       (setq personal-org-dir (concat (getenv "HOME") "/Documents/personal")
    ))

    (if 
       (getenv "NOTESMINE_DIR")
        (setq notesmine-dir (getenv "ORG_DIR"))
       (setq notesmine-dir (concat (getenv "HOME") "/Documents/notesmine")
    ))
#+end_src

** Remember Files
I use three files for notes that I create using Org-mode's "Remember"
feature.

  - Notes and TODOs go to notes.org
  - Appointments go to nate.org/Appointments
  - Journal entries go to journal.org

These settings are used in the [[Remember Templates]] section of this file.

#+begin_src emacs-lisp

  (setq njn/main-org-file (concat personal-org-dir "/nate.org"))
  (setq njn/journal-org-file (concat personal-org-dir "/journal.org"))
  (setq njn/notes-org-file (concat personal-org-dir "/notes.org"))
  
#+end_src
* Remember 
** Initialization
;; Integrate org-mode w/remember
(add-to-list 'load-path "~/.emacs.d/remember")
(require 'remember)
(org-remember-insinuate)


** Keep clocks running if started from remember mode
#+begin_src emacs-lisp
(setq org-remember-clock-out-on-exit nil)
#+end_src
** Remember Templates
#+begin_src emacs-lisp
  
  
  (setq org-remember-templates
     (list
        (list "Appointment" ?a "* %?\n  %U" njn/main-org-file "Appointments" nil)
        (list "Journal" ?j "* %U %?\n\n  %i\n  %a" njn/journal-org-file "X" 'my-check)
        (list "Todo" ?t "* TODO %?\n\n%U  %i" njn/notes-org-file 'top)
        (list "Note" ?n "* %?" nil 'top nil)
  ))
#+end_src

* Tasks

#+begin_src emacs-lisp
  ;; Don't allow setting a task to DONE if it has TODO 
  ;; subtasks
  (setq org-enforce-todo-dependencies t)
#+end_src

* Agenda
** Tweaks
#+begin_src emacs-lisp
;; Start the weekly agenda today
(setq org-agenda-start-on-weekday nil)

;; Display tags farther right
(setq org-agenda-tags-column -102)

;; Keep tasks with dates off the global todo lists
(setq org-agenda-todo-ignore-with-date t)

#+end_src
** Misc Functions
#+begin_src emacs-lisp

(defun njn/org-agenda ()
  "Set a variable called njn/current-buffer-file-name to record the
  name of the org-mode file that was active when org-agenda is called.  This
  variable is used by the 'Current Buffer' custom agenda view to show only
  items from the current buffer"
  (interactive)
  (setq njn/current-buffer-name (buffer-file-name))
  (org-agenda)
)
#+end_src
** Custom Commands
#+begin_src emacs-lisp
  ; Custom agenda commands
  (setq org-agenda-custom-commands 
        (quote (("P" "Projects" tags "/!PROJECT" ((org-use-tag-inheritance nil)))
                ("." "Current Buffer" ((agenda "" ))
                  ((org-agenda-files (list njn/current-buffer-name))
                   (org-agenda-show-log t)))
                ("S" "Started Tasks" todo "STARTED" ((org-agenda-todo-ignore-with-date nil)))
                ("w" "Tasks waiting on something" tags "WAITING" ((org-use-tag-inheritance nil)))
  
                ("d" "DELEGATED" tags "DELEGATED" ((org-use-tag-inheritance nil)))
                ("o" "SOMEDAY" tags "SOMEDAY" ((org-use-tag-inheritance nil)))
                ("r" "Refile New Notes and Tasks" tags "REFILE" ((org-agenda-todo-ignore-with-date nil)))
                ("p" "Personal Agenda" ((agenda ""))
                 ((org-agenda-files (directory-files personal-org-dir 't "^[^.].*org$"))
                  (org-agenda-show-log t)))
                ("e" "Enrollio Agenda" agenda ""
                 ((org-agenda-files enrollio-org-files)))
                ("n" "Notesmine Agenda" agenda ""
                 ((org-agenda-files notesmine-org-files)))
                ("j" "Journal" agenda ""
                 ((org-agenda-files (file-expand-wildcards (concat personal-org-dir "/journal.org")))))
                ("g" "Geek Agenda" agenda ""
                 ((org-agenda-files (file-expand-wildcards (concat personal-org-dir "/*geek.org")))))
                ;; Overview mode is same as default "a" agenda-mode, except doesn't show TODO
                ;; items that are under another TODO
                ("o" "Overview" agenda "" ((org-agenda-todo-list-sublevels nil)))
                ;; Separate menu, with custom searches
                ("fa" "Archive search" search ""
                 ((org-agenda-files (file-expand-wildcards (concat personal-org-dir "/*.org_archive")))))
                ("fn" "Notesmine search" search ""
                 ((org-agenda-files notesmine-org-files)))
                ("fp" "Personal search" search ""
                 ((org-agenda-files personal-org-files)))
                ("fe" "Enrollio search" search ""
                 ((org-agenda-files enrollio-org-files)))
                )))
#+end_src

* Appt Notifications
#+begin_src emacs-lisp
  (setq appt-message-warning-time 15
        appt-display-mode-line t
        appt-display-format 'window)
        (appt-activate 1)
        (display-time)

  (add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)

#+end_src

* Keyboard Shortcuts
** Something
#+begin_src emacs-lisp
;; Keyboard bindings
(global-set-key (kbd "<f5>") 'njn/org-agenda)
(global-unset-key (kbd "<f3>"))
(global-set-key (kbd "<f3> a") 'org-save-all-org-buffers)
(global-set-key (kbd "<f3> f") 'org-occur-in-agenda-files)
(global-set-key (kbd "<f3> i") 'org-clock-in)
(global-set-key (kbd "<f3> j") 'org-clock-goto)
(global-set-key (kbd "<f3> l") 'agenda-this-file-only)              ;; Lock agenda (and other org-functions)
(global-set-key (kbd "<f3> n") 'org-remember)
(global-set-key (kbd "<f3> o") 'org-clock-out)
(global-set-key (kbd "<f3> p") '(lambda() (interactive) (org-clock-goto 't)))
(global-set-key (kbd "<f3> r") 'org-resolve-clocks)
(global-set-key (kbd "<f3> s") 'njn/toggle-agenda-log-show-closed)
(global-set-key (kbd "<f3> u") 'org-agenda-remove-restriction-lock) ;; Undo agenda lock
#+end_src

** Editing
#+begin_src emacs-lisp
  (org-defkey org-mode-map (kbd "M-j")
    '(lambda () (interactive)
    (org-show-subtree) (end-of-line)
    (org-return-indent)))
#+end_src

* Fast Navigation to Files
#+begin_src emacs-lisp

(global-set-key (kbd "<f6> m") (lambda () "Goto some task"
    (interactive)
    (org-id-goto "49E0DC6B-D78C-4C7A-88BF-545DA0907FFE"))) 

(global-set-key (kbd "<f6> e") (lambda () "Goto Enrollio"
    (interactive)
    (org-id-goto "997DDAB8-DDFF-4517-90F2-CEFB0A2727E7"))) 


(global-set-key (kbd "<f6> b") (lambda () "Goto Byteworks"
    (interactive)
    (org-id-goto "BFBDC32E-915B-418A-9B94-9791CDA49DD3"))) 

(global-set-key (kbd "<f6> c") (lambda () "Org Mode Custom"
    (interactive)
    (org-id-goto "BCFE2FAF-6510-4949-B182-66521BB14A5D")))

(global-set-key (kbd "<f6> o") 'njn/goto-org-mode-task)
(global-set-key (kbd "<f6> g") 'njn/goto-org-mode-notesmine)
(global-set-key (kbd "<f6> h") 'njn/goto-home)
(global-set-key (kbd "<f6> l") 'njn/goto-customer1)

(defun njn/goto-org-mode-task()
  "Goto umbrella org-mode task" 
  (interactive) 
  (org-id-goto "2B8F0265-6509-4E79-9355-312F4B340503"))


(defun njn/goto-org-mode-notesmine()
  "Goto notesmine org-mode file" 
  (interactive) 
  (org-id-goto "F10D261F-0AFB-448F-BB34-8CAF652144CE"))


(global-set-key (kbd "<f6> n") 'njn/goto-notes)
(defun njn/goto-notes()
  "Goto notes org-mode file" 
  (interactive) 
  (org-id-goto "7E945130-2544-4600-A46E-07B774601C80"))


(defun njn/goto-home()
  "Goto notes org-mode file" 
  (interactive) 
  (org-id-goto "772DFBDD-38A3-4E92-8860-6904CC9D4F49"))


(defun njn/goto-customer1()
  "Goto customer1's org-mode file" 
  (interactive) 
  (org-id-goto "5C3263D1-949E-4E01-937A-201A8E83E1C0"))




#+end_src

#+results:
: njn/goto-customer1

* Clocking

#+begin_src emacs-lisp
  ;; Use 10 minute increments
  (setq org-time-stamp-rounding-minutes (quote (1 10)))
#+end_src

* Yasnippets

#+begin_src emacs-lisp
;; Make TAB the yas trigger key in the org-mode-hook and turn on flyspell mode
(add-hook 'org-mode-hook
          (let ((original-command (lookup-key org-mode-map [tab])))
            `(lambda ()
               (setq yas/fallback-behavior
                     '(apply ,original-command))
               (local-set-key [tab] 'yas/expand))))
#+end_src
